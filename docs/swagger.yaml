basePath: /
definitions:
  event.CreateEventRequest:
    properties:
      description:
        example: An amazing summer concert with live music
        type: string
      event_date:
        example: "2024-08-15T20:00:00Z"
        type: string
      ticket_price:
        example: 50
        minimum: 0
        type: number
      title:
        example: Summer Concert
        type: string
      total_tickets:
        example: 100
        minimum: 1
        type: integer
      venue_id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
    required:
    - event_date
    - ticket_price
    - title
    - total_tickets
    - venue_id
    type: object
  event.ErrorResponse:
    properties:
      error:
        example: validation_error
        type: string
      message:
        example: Invalid input data
        type: string
    type: object
  event.EventListResponse:
    properties:
      count:
        type: integer
      events:
        items:
          $ref: '#/definitions/event.EventResponse'
        type: array
    type: object
  event.EventResponse:
    properties:
      available_tickets:
        example: 75
        type: integer
      created_at:
        example: "2024-01-01T00:00:00Z"
        type: string
      description:
        example: An amazing summer concert with live music
        type: string
      event_date:
        example: "2024-08-15T20:00:00Z"
        type: string
      id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      organizer_id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      status:
        example: ACTIVE
        type: string
      ticket_price:
        example: 50
        type: number
      title:
        example: Summer Concert
        type: string
      total_tickets:
        example: 100
        type: integer
      updated_at:
        example: "2024-01-01T00:00:00Z"
        type: string
      venue_id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
    type: object
  event.SuccessResponse:
    properties:
      message:
        example: Event created successfully
        type: string
    type: object
  event.UpdateEventRequest:
    properties:
      description:
        example: An amazing summer concert with live music - Updated
        type: string
      event_date:
        example: "2024-08-15T20:00:00Z"
        type: string
      ticket_price:
        example: 60
        minimum: 0
        type: number
      title:
        example: Summer Concert - Updated
        type: string
      total_tickets:
        example: 150
        minimum: 1
        type: integer
      venue_id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
    required:
    - event_date
    - ticket_price
    - title
    - total_tickets
    - venue_id
    type: object
  order.CreateOrderRequest:
    properties:
      event_id:
        type: string
      quantity:
        minimum: 1
        type: integer
    required:
    - event_id
    - quantity
    type: object
  order.ErrorResponse:
    properties:
      error:
        type: string
      message:
        type: string
    type: object
  order.OrderListResponse:
    properties:
      count:
        type: integer
      orders:
        items:
          $ref: '#/definitions/order.OrderResponse'
        type: array
    type: object
  order.OrderResponse:
    properties:
      created_at:
        type: string
      event_id:
        type: string
      id:
        type: string
      quantity:
        type: integer
      status:
        type: string
      total_amount:
        type: number
      user_id:
        type: string
    type: object
  user.CreateUserRequest:
    properties:
      email:
        description: User's email address - must be unique
        example: user@example.com
        type: string
      password:
        description: Password - must be at least 8 characters
        example: password123
        minLength: 8
        type: string
      username:
        description: Username - must be at least 3 characters
        example: john_doe
        minLength: 3
        type: string
    required:
    - email
    - password
    - username
    type: object
  user.ErrorResponse:
    properties:
      error:
        description: Error message
        example: Error message
        type: string
      message:
        description: Additional error details
        example: Additional error details
        type: string
    type: object
  user.LoginRequest:
    properties:
      email:
        description: User's email address
        example: user@example.com
        type: string
      password:
        description: User's password
        example: password123
        type: string
    required:
    - email
    - password
    type: object
  user.LoginResponse:
    properties:
      expires_at:
        description: Token expiration timestamp
        example: 1735689600
        type: integer
      token:
        description: JWT access token
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
      user:
        allOf:
        - $ref: '#/definitions/user.UserResponse'
        description: User information
    type: object
  user.UserResponse:
    properties:
      email:
        description: User's email address
        example: user@example.com
        type: string
      id:
        description: Unique identifier for the user
        example: 123e4567-e89b-12d3-a456-426614174000
        type: string
      roles:
        description: User's roles in the system
        example:
        - USER
        - ADMIN
        items:
          type: string
        type: array
      username:
        description: User's chosen username
        example: john_doe
        type: string
    type: object
  venue.CreateVenueRequest:
    properties:
      address:
        minLength: 1
        type: string
      capacity:
        minimum: 1
        type: integer
      description:
        type: string
      name:
        maxLength: 255
        minLength: 1
        type: string
    required:
    - address
    - capacity
    - name
    type: object
  venue.ErrorResponse:
    properties:
      error:
        type: string
      message:
        type: string
    type: object
  venue.SuccessResponse:
    properties:
      message:
        type: string
    type: object
  venue.UpdateVenueRequest:
    properties:
      address:
        minLength: 1
        type: string
      capacity:
        minimum: 1
        type: integer
      description:
        type: string
      name:
        maxLength: 255
        minLength: 1
        type: string
    required:
    - address
    - capacity
    - name
    type: object
  venue.VenueListResponse:
    properties:
      count:
        type: integer
      venues:
        items:
          $ref: '#/definitions/venue.VenueResponse'
        type: array
    type: object
  venue.VenueResponse:
    properties:
      address:
        type: string
      capacity:
        type: integer
      created_at:
        type: string
      description:
        type: string
      id:
        type: string
      name:
        type: string
      updated_at:
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: A RESTful API for user management and event ticketing system with CRUD
    operations and JWT authentication
  title: Enterprise CRUD API
  version: 1.0.0
paths:
  /api/v1/auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate user with email and password, returns JWT token
      parameters:
      - description: User login credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/user.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Login successful
          schema:
            $ref: '#/definitions/user.LoginResponse'
        "400":
          description: Invalid request data
          schema:
            $ref: '#/definitions/user.ErrorResponse'
        "401":
          description: Invalid credentials
          schema:
            $ref: '#/definitions/user.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/user.ErrorResponse'
      summary: User login
      tags:
      - auth
  /api/v1/events:
    get:
      consumes:
      - application/json
      description: Get list of all events
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/event.EventListResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/event.ErrorResponse'
      summary: Get all events
      tags:
      - events
    post:
      consumes:
      - application/json
      description: Create a new event (requires ORGANIZER or ADMIN role)
      parameters:
      - description: Event data
        in: body
        name: event
        required: true
        schema:
          $ref: '#/definitions/event.CreateEventRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/event.EventResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/event.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/event.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/event.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/event.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new event
      tags:
      - events
  /api/v1/events/{id}:
    delete:
      consumes:
      - application/json
      description: Delete an event (only by organizer, only if no tickets sold)
      parameters:
      - description: Event ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/event.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/event.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/event.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/event.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/event.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/event.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete event
      tags:
      - events
    get:
      consumes:
      - application/json
      description: Get event details by ID
      parameters:
      - description: Event ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/event.EventResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/event.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/event.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/event.ErrorResponse'
      summary: Get event by ID
      tags:
      - events
    put:
      consumes:
      - application/json
      description: Update an existing event (only by organizer)
      parameters:
      - description: Event ID
        in: path
        name: id
        required: true
        type: string
      - description: Event data
        in: body
        name: event
        required: true
        schema:
          $ref: '#/definitions/event.UpdateEventRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/event.EventResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/event.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/event.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/event.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/event.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/event.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update event
      tags:
      - events
  /api/v1/events/{id}/cancel:
    patch:
      consumes:
      - application/json
      description: Cancel an event (only by organizer)
      parameters:
      - description: Event ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/event.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/event.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/event.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/event.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/event.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/event.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Cancel event
      tags:
      - events
  /api/v1/events/my-events:
    get:
      consumes:
      - application/json
      description: Get events created by the current organizer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/event.EventListResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/event.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/event.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get my events
      tags:
      - events
  /api/v1/orders:
    post:
      consumes:
      - application/json
      description: Create a new order (requires USER role)
      parameters:
      - description: Order data
        in: body
        name: order
        required: true
        schema:
          $ref: '#/definitions/order.CreateOrderRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/order.OrderResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/order.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/order.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/order.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/order.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new order
      tags:
      - orders
  /api/v1/orders/{id}:
    get:
      consumes:
      - application/json
      description: Get order details by ID (user can only see their own orders)
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/order.OrderResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/order.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/order.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/order.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/order.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/order.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get order by ID
      tags:
      - orders
  /api/v1/orders/my-orders:
    get:
      consumes:
      - application/json
      description: Get all orders for the current user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/order.OrderListResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/order.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/order.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get my orders
      tags:
      - orders
  /api/v1/users:
    post:
      consumes:
      - application/json
      description: Create a new user with email, username and password
      parameters:
      - description: User creation request
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/user.CreateUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: User created successfully
          schema:
            $ref: '#/definitions/user.UserResponse'
        "400":
          description: Invalid request data
          schema:
            $ref: '#/definitions/user.ErrorResponse'
        "409":
          description: User already exists
          schema:
            $ref: '#/definitions/user.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/user.ErrorResponse'
      summary: Create a new user
      tags:
      - users
  /api/v1/users/{email}:
    get:
      description: Get user details by email address
      parameters:
      - description: User email
        in: path
        name: email
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User found
          schema:
            $ref: '#/definitions/user.UserResponse'
        "401":
          description: Unauthorized - invalid or missing token
          schema:
            $ref: '#/definitions/user.ErrorResponse'
        "403":
          description: Forbidden - insufficient permissions
          schema:
            $ref: '#/definitions/user.ErrorResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/user.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/user.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get user by email
      tags:
      - users
  /api/v1/users/profile:
    get:
      description: Get the profile of the currently authenticated user with their
        roles
      produces:
      - application/json
      responses:
        "200":
          description: User profile retrieved successfully
          schema:
            $ref: '#/definitions/user.UserResponse'
        "401":
          description: Unauthorized - invalid or missing token
          schema:
            $ref: '#/definitions/user.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/user.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get current user profile
      tags:
      - users
  /api/v1/venues:
    get:
      consumes:
      - application/json
      description: Get list of all venues
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/venue.VenueListResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/venue.ErrorResponse'
      summary: Get all venues
      tags:
      - venues
    post:
      consumes:
      - application/json
      description: Create a new venue (requires ORGANIZER or ADMIN role)
      parameters:
      - description: Venue data
        in: body
        name: venue
        required: true
        schema:
          $ref: '#/definitions/venue.CreateVenueRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/venue.VenueResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/venue.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/venue.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/venue.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/venue.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new venue
      tags:
      - venues
  /api/v1/venues/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a venue (requires ADMIN role)
      parameters:
      - description: Venue ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/venue.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/venue.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/venue.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/venue.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/venue.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/venue.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete venue
      tags:
      - venues
    get:
      consumes:
      - application/json
      description: Get venue details by ID
      parameters:
      - description: Venue ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/venue.VenueResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/venue.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/venue.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/venue.ErrorResponse'
      summary: Get venue by ID
      tags:
      - venues
    put:
      consumes:
      - application/json
      description: Update an existing venue (requires ORGANIZER or ADMIN role)
      parameters:
      - description: Venue ID
        in: path
        name: id
        required: true
        type: string
      - description: Venue data
        in: body
        name: venue
        required: true
        schema:
          $ref: '#/definitions/venue.UpdateVenueRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/venue.VenueResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/venue.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/venue.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/venue.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/venue.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/venue.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update venue
      tags:
      - venues
schemes:
- http
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
